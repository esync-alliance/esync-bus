
if("${GHS_OS_DIR}" STREQUAL "")
  message(FATAL_ERROR "The GHS_OS_DIR is not found, please set GHS_OS in the config.cmk.default first!")
endif()

if("${GHS_BSP_NAME}" STREQUAL "")
  message(FATAL_ERROR "The GHS_BSP_NAME is not found, please set the GHS_BSP_NAME in the config.cmk.default first")
endif()

if("${BUILD_TOOL_DIR}" STREQUAL "")
  message(FATAL_ERROR "The BUILD_TOOL is not found, please set the BUILD_TOOL in the config.cmk.default  first!")
endif()
set(BUILD_TOOL ${BUILD_TOOL_DIR}/gbuild)

if("${LIB_XL4BUS_DIR}" STREQUAL "")
  set(LIB_XL4BUS_DIR "${CMAKE_SOURCE_DIR}")
endif()

if ("${LIB_JSONC_DIR}" STREQUAL "")
  set(LIB_JSONC_DIR "${CMAKE_SOURCE_DIR}/json-c")
  if (NOT EXISTS ${LIB_JSONC_DIR})
    message(FATAL_ERROR "json-c does not exist, clone json-c first")
  endif()
endif()
if ("${LIB_JANSSON_DIR}" STREQUAL "")
  set(LIB_JANSSON_DIR "${CMAKE_SOURCE_DIR}/jansson")
  if (NOT EXISTS ${LIB_JANSSON_DIR})
    message(FATAL_ERROR "jansson does not exist, clone jansson first")
  endif()
endif()
if ("${LIB_CARES_DIR}" STREQUAL "")
  set(LIB_CARES_DIR "${CMAKE_SOURCE_DIR}/c-ares")
  if (NOT EXISTS ${LIB_CARES_DIR})
    message(FATAL_ERROR "c-ares does not exist, clone c-ares first")
  endif()
endif()
if ("${LIB_CJOSE_DIR}" STREQUAL "")
  set(LIB_CJOSE_DIR "${CMAKE_SOURCE_DIR}/cjose")
  if (NOT EXISTS ${LIB_CJOSE_DIR})
    message(FATAL_ERROR "cjose does not exist, clone cjose first")
  endif()
endif()
if ("${LIB_OPENSSL_DIR}" STREQUAL "")
  set(LIB_OPENSSL_DIR "${CMAKE_SOURCE_DIR}/ghs_port/openssl/openssl")
  if (NOT EXISTS ${LIB_OPENSSL_DIR})
    message(FATAL_ERROR "openssl does not exist, clone openssl first")
  endif()
endif()
if ("${LIB_MBEDTLS_DIR}" STREQUAL "")
  set(LIB_MBEDTLS_DIR "${CMAKE_SOURCE_DIR}/mbedtls")
  if (NOT EXISTS ${LIB_MBEDTLS_DIR})
    message(FATAL_ERROR "mbedtls does not exist, clone mbedtls first")
  endif()
endif()
if ("${LIB_GHS_MISC_DIR}" STREQUAL "")
  set(LIB_GHS_MISC_DIR "${CMAKE_SOURCE_DIR}/ghs_port/ghs_misc")
  if (NOT EXISTS ${LIB_GHS_MISC_DIR})
    message(FATAL_ERROR "ghs_misc does not exist, clone ghs_misc first")
  endif()
endif()

# Build directories of all dependent libraries
if(("${LIB_MBEDTLS_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_MBEDTLS_BUILD_DIR}))
  set(LIB_MBEDTLS_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/mbedtls/build")
  if (NOT IS_DIRECTORY ${LIB_MBEDTLS_BUILD_DIR})
    message(FATAL_ERROR "Yout must build mbedtls first")
  endif()
endif()

if(("${LIB_CARES_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_CARES_BUILD_DIR}))
  set(LIB_CARES_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/c-ares/build")
  if (NOT IS_DIRECTORY ${LIB_CARES_BUILD_DIR})
    message(FATAL_ERROR "You must build c-ares first")
  endif()
endif()

if(("${LIB_JSONC_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_JSONC_BUILD_DIR}))
  set(LIB_JSONC_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/json-c/build")
  if (NOT IS_DIRECTORY ${LIB_JSONC_BUILD_DIR})
    message(FATAL_ERROR "You must build json-c first")
  endif()
endif()

if(("${LIB_CJOSE_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_CJOSE_BUILD_DIR}))
  set(LIB_CJOSE_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/cjose/build")
  if (NOT IS_DIRECTORY ${LIB_CJOSE_BUILD_DIR})
    message(FATAL_ERROR "You must build cjose first")
  endif()
endif()

if(("${LIB_OPENSSL_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_OPENSSL_BUILD_DIR}))
  set(LIB_OPENSSL_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/openssl/build")
  if (NOT IS_DIRECTORY ${LIB_OPENSSL_BUILD_DIR})
    message(FATAL_ERROR "You must build cjose first")
  endif()
endif()

if(("${LIB_JANSSON_BUILD_DIR}" STREQUAL "") OR (NOT IS_DIRECTORY ${LIB_JANSSON_BUILD_DIR}))
  set(LIB_JANSSON_BUILD_DIR "${CMAKE_SOURCE_DIR}/ghs_port/jansson/build")
  if (NOT IS_DIRECTORY ${LIB_JANSSON_BUILD_DIR})
    message(FATAL_ERROR "You must build jansson first")
  endif()
endif()

set(LIB_XL4BUS_BUILD_DIR "${CMAKE_BINARY_DIR}")

macro(install_headers srcDir dstDir)
  message(STATUS "Installing header files of openssl")
  file(GLOB_RECURSE headerFiles RELATIVE ${srcDir} ${srcDir}/*.h)
  foreach(headerFile in ${headerFiles})
    set(file ${srcDir}/${headerFile})
    if (EXISTS ${file})
      get_filename_component(name ${headerFile} NAME)
      #message(STATUS "${name}")
      execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${file} ${dstDir}/${name})
    endif()
  endforeach()
endmacro(install_headers)

#Generate INTEGRITY project files
macro(configure_files srcDir dstDir)
  message(STATUS "Generating the gpj file FROM ${srcDir} TO  directory ${dstDir}")
  file(GLOB cfgFiles RELATIVE ${srcDir} ${srcDir}/*.in)

  foreach(cfgFile in ${cfgFiles})
    set(filePath ${srcDir}/${cfgFile})
    if(EXISTS ${filePath})
      # Remove the extension .in from input file for output file
      string(REGEX REPLACE ".in$" "" dstFile ${cfgFile})
      configure_file(${filePath} ${dstDir}/${dstFile} @ONLY)
    endif()
  endforeach()
endmacro(configure_files)

configure_files(${CMAKE_SOURCE_DIR}/ghs_port ${CMAKE_BINARY_DIR})

if (NOT EXISTS ${CMAKE_BINARY_DIR}/include/libxl4bus)
  make_directory(${CMAKE_BINARY_DIR}/include/libxl4bus)
endif()

install_headers(${LIB_XL4BUS_DIR}/src ${CMAKE_BINARY_DIR}/include/libxl4bus)
