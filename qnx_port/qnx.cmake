#
# CMake Toolchain file for crosscompiling on ARM.
#
# This can be used when running cmake in the following way:
#  cd build/
#  cmake .. -DCMAKE_TOOLCHAIN_FILE=../qnx.cmake
#

set(CMAKE_SYSTEM_NAME QNX)

set(arch gcc_ntoarmv7le)

set(CMAKE_C_COMPILER qcc)
set(CMAKE_C_COMPILER_TARGET ${arch})
set(CMAKE_CXX_COMPILER QCC)
set(CMAKE_CXX_COMPILER_TARGET ${arch})

IF(CMAKE_HOST_WIN32)
	SET(HOST_EXECUTABLE_SUFFIX ".exe")
	#you might need to set this
	SET(QNX_TARGET $ENV{QNX_TARGET})
ELSE(CMAKE_HOST_WIN32)
    SET(HOST_EXECUTABLE_SUFFIX "")
	#you might need to set this
	SET(QNX_TARGET $ENV{QNX_TARGET})
ENDIF(CMAKE_HOST_WIN32)
IF(CMAKE_HOST_WIN32)
FIND_PATH(QNX_HOST
  NAME usr/bin/qcc${HOST_EXECUTABLE_SUFFIX}
  PATHS $ENV{QNX_HOST} $ENV{QNX_TARGET}/armle-v7/lib $ENV{QNX_TARGET}/armle-v7/usr/lib
  NO_CMAKE_PATH
  NO_CMAKE_ENVIRONMENT_PATH
)
ELSE(CMAKE_HOST_WIN32)
FIND_PATH(QNX_HOST
  NAME usr/bin/qcc${HOST_EXECUTABLE_SUFFIX}
  PATHS $ENV{QNX_HOST} $ENV{QNX_TARGET}/armle-v7/lib $ENV{QNX_TARGET}/armle-v7/usr/lib
  NO_CMAKE_PATH
  NO_CMAKE_ENVIRONMENT_PATH
)
ENDIF(CMAKE_HOST_WIN32)
  
FIND_PATH(QNX_TARGET
  NAME usr/include/qnx_errno.h
  PATHS $ENV{QNX_TARGET} ${QNX_PATH}/target/qnx7 ${QNX_PATH}/target/qnx7/armle-v7/lib ${QNX_PATH}/target/qnx7/armle-v7/usr/lib
  NO_CMAKE_PATH
  NO_CMAKE_ENVIRONMENT_PATH
)
SET(ENV{QNX_HOST} ${QNX_HOST})
SET(ENV{QNX_TARGET} ${QNX_TARGET})
IF(CMAKE_HOST_WIN32)
  SET(ENV{QNX_CONFIGURATION} ${QNX_CONFIGURATION})
  SET(ENV{PATH} "$ENV{PATH};${QNX_HOST}/usr/bin")
ENDIF(CMAKE_HOST_WIN32)

SET(CMAKE_FIND_ROOT_PATH ${QNX_TARGET}) 
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

