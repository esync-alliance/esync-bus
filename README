
This is a quick info on building libxl4bus.
Additional documentation is provided for porting.

ALL
===

* Make sure CMake 3.5 or newer is installed.
* Create build directory (e.g. "build"). All artifacts
  will be contained into this build directory
* Make relevant configuration changes (pick your O/S section below).
* Build any submodules (see O/S sections)
* Change into build directory and run "cmake .."
  (Use "cmake -DCMAKE_BUILD_TYPE=Debug .." for debug config)
* Run make to build the libraries, broker and sample clients

CONFIGURING
===========

The following options can be used in config.cmk file in the port directory.
If file doesn't exist, config.cmk.default will be used instead.
To customize the configuration, copy config.cmk.defaults to config.cmk first.

Supported options:
* BUILD_SHARED (default TRUE)
  Build shared version of the xl4bus client library
* BUILD_STATIC (default TRUE)
  Build static version of the xl4bus client library
* BUILD_BINS (default TRUE)
  Build xl4bus binaries - broker and the test clients
* XL4_PROVIDE_THREADS (default TRUE, see build_config.h.in)
* XL4_PROVIDE_DEBUG (default 0, see build_config.h.in)
* XL4_PROVIDE_PRINTF (default 0, see build_config.h.in)
* XL4_PROVIDE_PERF (default TRUE, see build_config.h.in)
* XL4_PROVIDE_EPOLL_CREATE1 (default TRUE, see build_config.h.in)
* XL4_SUPPORT_IPV6 (default TRUE, see build_config.h.in)
* XL4_SUPPORT_IPV4 (default TRUE, see build_config.h.in)
* XL4_SUPPORT_THREADS (default TRUE, see build_config.h.in)
* XL4_SUPPORT_RESOLVER (default TRUE, see build_config.h.in)
* XL4_SUPPORT_DGRAM_PAIR (default TRUE, see build_config.h.in)
* XL4_HAVE_GETTIMEOFDAY (default TRUE, see build_config.h.in)
* XL4_HAVE_STD_MALLOC (default TRUE, see build_config.h.in)
* XL4_HAVE_EPOLL (default TRUE, see build_config.h.in)
* XL4_MAX_UA_PATHS (default 10, see build_config.h.in)
* XL4_HL_KEY_EXPIRATION_MS (default 24 hours, see build_config.h.in)
* XL4_HL_KEY_USE_EXPIRATION_MS (default 1 hour, see build_config.h.in)
* XL4_DEBUG_REFS (default FALSE, see build_config.h.in)

LINUX
=====

* Install development packages for:
  - Jansson
  - OpenSSL
* Install autoconf, automake and libtool packages
* Initialize submodules:
  - git submodule init
  - git submodule update
* Build json-c:
  - ( rm -rf json-c-build && cp -fr json-c json-c-build && \
         cd json-c-build && autoreconf -f -i && \
         CFLAGS="-fPIC -fvisibility=hidden -Wno-implicit-fallthrough" \
         CPPFLAGS="-include $(pwd)/../json-c-rename.h" \
         ./configure --enable-static --disable-shared && make -j )
* Build mbedtls:
  - ( rm -rf mbedtls-build && cp -fr mbedtls mbedtls-build && cd mbedtls-build && \
         ./scripts/config.pl set MBEDTLS_PLATFORM_MEMORY && mkdir -p build && cd build && \
         cmake -DCMAKE_C_FLAGS="-fPIC -fvisibility=hidden" .. && make -j )
* Build cjose:
  - ( rm -rf cjose-build && cp -fr cjose cjose-build && cd cjose-build && autoreconf -f -i && \
      CFLAGS="-fPIC -fvisibility=hidden" ./configure --with-openssl=/usr --with-jansson=/usr \
       --enable-static --disable-shared && make -j )
* Build c-ares:
  - ( rm -rf c-ares-build && cp -fr c-ares c-ares-build && cd c-ares-build && ./buildconf && \
      CFLAGS="-fPIC -fvisibility=hidden" ./configure --enable-static --disable-shared && make -j )

QNX
===
* Initialize submodules:
  - git submodule init
  - git submodule update
* Select QNX version
  - export XL4_TARGET_OS=qnx660 or
  - export XL4_TARGET_OS=qnx700
* Select target architecture
  - export XL4_TARGET_ARCH=armv7l or
  - export XL4_TARGET_ARCH=aarch64l
* Load QNX build environment, for example
  - source ~/qnx660/qnx660-env.sh or
  - source ~/qnx700/qnxsdp-env.sh
* Build dependencies
  - cd qnx_port && ./build_deps.sh all clean && ./build_deps.sh all
* Build library and application
  - cd qnx_port && ./build.sh clean && ./build.sh
